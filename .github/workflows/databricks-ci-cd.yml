name: Databricks CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
          - both
      run_tests:
        description: 'Run tests before deployment'
        required: false
        default: false
        type: boolean
      run_job_after_deploy:
        description: 'Run job after successful deployment'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.9"

permissions:
  id-token: write
  contents: read

jobs:
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   if: |
  #     (github.event_name != 'workflow_dispatch') || 
  #     (github.event_name == 'workflow_dispatch' && github.event.inputs.run_tests == 'true')
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}
        
  #   - name: Cache pip dependencies
  #     uses: actions/cache@v4
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-
          
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements-dev.txt
  #       pip install -e .
        
  #   - name: Run tests
  #     run: |
  #       python -m pytest tests/ -v
        
  validate:
    name: Validate Bundle
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Databricks CLI
      run: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
        echo "$HOME/.databricks/bin" >> $GITHUB_PATH
        
    - name: Verify Databricks CLI installation
      run: |
        databricks --version
        
    - name: Validate bundle configuration
      run: |
        databricks bundle validate --target dev
      env:
        DATABRICKS_AUTH_TYPE: github-oidc
        DATABRICKS_HOST: https://adb-2115782714327793.13.azuredatabricks.net/
        DATABRICKS_CLIENT_ID: 3c2f0c96-251d-4b3e-8037-75a9264f1e16

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      always() 
      ||
      (needs.test.result == 'success' || needs.test.result == 'skipped') ||
      needs.validate.result == 'success' &&
      (
        (github.event_name != 'workflow_dispatch' && (github.ref == 'refs/heads/develop' || github.event_name == 'pull_request')) ||
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'dev' || github.event.inputs.environment == 'both'))
      )
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Databricks CLI
      run: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
        echo "$HOME/.databricks/bin" >> $GITHUB_PATH
        
    - name: Deploy to Dev Environment
      run: |
        databricks bundle deploy --target dev
      env:
        DATABRICKS_AUTH_TYPE: github-oidc
        DATABRICKS_HOST: https://adb-2115782714327793.13.azuredatabricks.net/
        DATABRICKS_CLIENT_ID: 3c2f0c96-251d-4b3e-8037-75a9264f1e16
        
    # - name: Run Dev Job (Optional)
    #   if: github.event.inputs.run_job_after_deploy == 'true'
    #   run: |
    #     # Replace 'dab_test_job' with your actual job name from resources/dab_test.job.yml
    #     databricks bundle run --target dev dab_test_job
    #   env:
    #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
    #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

  # deploy-prod:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [test, validate]
  #   if: |
  #     always() &&
  #     (needs.test.result == 'success' || needs.test.result == 'skipped') &&
  #     needs.validate.result == 'success' &&
  #     (
  #       (github.event_name != 'workflow_dispatch' && github.ref == 'refs/heads/main') ||
  #       (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'both'))
  #     )
  #   environment: production  # Requires manual approval in GitHub
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}
        
  #   - name: Install Databricks CLI
  #     run: |
  #       curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
  #       echo "$HOME/.databricks/bin" >> $GITHUB_PATH
        
  #   - name: Deploy to Production Environment
  #     run: |
  #       databricks bundle deploy --target prod
  #     env:
  #       DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  #       DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        
  #   - name: Run Production Job (Optional)
  #     if: github.event.inputs.run_job_after_deploy == 'true'
  #     run: |
  #       # Replace 'dab_test_job' with your actual job name from resources/dab_test.job.yml
  #       databricks bundle run --target prod dab_test_job
  #     env:
  #       DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  #       DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
